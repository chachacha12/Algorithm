/*

재귀의 쓰임

재귀: 하나의 함수에서 자기자신을 다시 호출해 작업을 수행하는 알고리즘



수학적 귀납법이란?

ex) 도미노가 모두 쓰러지는가?

1번 도미노가 쓰러진다
k번 도미노가 쓰러지면 k+1번 도미노도 쓰러진다

위 두가지가 참이면 모든 경우에 대해 참. 즉 모든 도미노는 쓰러진다?


재귀함수의 조건:
특정 입력에 대해서는 자기자신 함수를 호출하지 않고 종료되어야함(Base condition)
모든 입력은 base condition으로 수렴해야 함


재귀에 대한 정보

1. 함수의 인자로 어떤 것을 받고 어디까지 계산한 후 자기 자신에게 넘겨줄지 명확하게 정해야함.
2. 모든 재귀함수는 반복문만으로 동일한 동작을 하는 함수를 만들 수 있음.
3. 재귀는 반복문으로 구현했을 때에 비해 코드가 간결하지만 메모리/시간에서는 손해를 봄. 그러므로
어느 문제에서 그냥 반복문 등을 써서 해결할지 재귀를 쓸지 구분하는 능력..문제풀다보면 알게될거임.

4. 한 함수가 자기 자신을 여러 번 호출하게 되면 비효율적일 수 있음
(ex. 피보나치수욜 재귀로 구성했을때.. -> 이미 한번 한 계산을 다른 곳에서도 반복해서 진행..-> 그래서 시간복잡도가 거의 지수함수만큼 걸림..n=100이면 거의 일반 컴퓨터로 20000년동안 걸림,,)
--> 이건 나중에 배울 다이나믹 프로그래밍을 통해 O(n)으로 해결 가능

5. 재귀함수가 자기 자신을 부를때 메모리상 스택 영역에 함수가 계속 누적이 된다.
(백준에선 괜찮지만 특정 문제풀이사이트나 코테에선 스택영역 메모리제한이 1mb인 경우도 있음..
그래서 재귀 많이 호출하다보면 런타임에러 발생할 수도 있음.)
(* 지역변수도 스택영역에 올라감. 그래서 지역변수로 int[2000][2000] 이렇게 잡을경우에 int가 4백만개 필요하니 벌써 16mb 필요해서 런타임에러 날 수 있음 )


*/
